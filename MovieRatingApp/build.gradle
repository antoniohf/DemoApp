
buildscript {
	ext {
		//dependencies
		springbootVersion = '2.1.6.RELEASE'
		dockerPluginVersion = '0.13.0'
		kotlinPluginVersion = '1.3.50'
		jjwtVersion = '0.9.1'
		slf4jVersion = '1.7.29'
		h2Version = '1.4.200'
		kotlinxVersion = '1.3.2'
		liquibasePluginVersion = '2.0.1'
		liquibaseVersion = '3.8.1'
	}
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${dockerPluginVersion}")
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinPluginVersion}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinPluginVersion}"
		classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinPluginVersion}"
		classpath "org.liquibase:liquibase-gradle-plugin:${liquibasePluginVersion}"
	}

}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: 'org.liquibase.gradle'

// This is used as the docker image prefix (org)
group = 'antoniohf'

bootJar {
	baseName = 'movierating-docker'
	archiveVersion =  '0.0.1'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

// tag::task[]
task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}
docker {
	name "${project.group}/${bootJar.baseName}"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}
// end::task[]

repositories {
	mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web:${springbootVersion}")
	compile("org.springframework.boot:spring-boot-starter-security:${springbootVersion}")
	compile("org.springframework.boot:spring-boot-starter-data-jpa:${springbootVersion}")
	compile("io.jsonwebtoken:jjwt:${jjwtVersion}") // specific version because it was audited and deemed safe/compliant ?
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinPluginVersion}")
	compile("org.slf4j:slf4j-api:${slf4jVersion}")
	runtimeOnly "com.h2database:h2:${h2Version}"
	testCompile("org.springframework.boot:spring-boot-starter-test:${springbootVersion}")
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinxVersion}"
	implementation "org.liquibase:liquibase-core:${liquibaseVersion}"
	liquibaseRuntime 'org.liquibase:liquibase-core:3.6.1'
}
